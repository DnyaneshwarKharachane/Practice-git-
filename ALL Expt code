//  Exp2.java (Mouse Event)
import java.awt.*;
import java.awt.event.*;
class Exp2 extends Frame implements MouseListener {
 Exp2() {
 setTitle("Mouse Event Frame");
 setSize(400, 300);
 setLayout(new FlowLayout());
 add(new Label("Mouse Events: Enter, Exit, Click"));
 addMouseListener(this);
 setVisible(false); // Frame hidden initially
 }
 public void mouseEntered(MouseEvent e) {
 System.out.println("Mouse Entered");
 setVisible(true);
 }
 public void mouseExited(MouseEvent e) {
 System.out.println("Mouse Exited");
 setVisible(false);
 }
 public void mouseClicked(MouseEvent e) {
 System.out.println("Mouse Clicked");
 }
 public void mousePressed(MouseEvent e) {}
 public void mouseReleased(MouseEvent e) {}
 public static void main(String[] args) {
 Frame baseFrame = new Frame("Trigger Area");
 baseFrame.setSize(300, 200);
 baseFrame.setLayout(new FlowLayout());
 baseFrame.add(new Label("Move mouse here to show the frame"));
 baseFrame.setVisible(true);
 Exp2 mouseFrame = new Exp2();
 baseFrame.addMouseListener(new MouseAdapter() {
 public void mouseEntered(MouseEvent e) {
 mouseFrame.setVisible(true);
 } }); } }


 //Expt 3 (Markssystem)
 import javax.swing.*;
import java.awt.*;

public class Exp3 {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(SimpleMarksWindow::new);
    }
}

class SimpleMarksWindow extends JFrame {
    JTextField[] markFields = new JTextField[5];
    String[] subjects = {"PCS", "CS", "SS", "OOP", "PBL"};

    SimpleMarksWindow() {
        setTitle("Enter Subject Marks");
        setSize(300, 300);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new GridLayout(7, 2, 10, 10));

        add(new JLabel("Enter marks for subjects:", SwingConstants.CENTER));
        add(new JLabel()); // spacer

        for (int i = 0; i < 5; i++) {
            add(new JLabel(subjects[i] + ":"));
            markFields[i] = new JTextField();
            add(markFields[i]);
        }

        JButton submit = new JButton("Submit");
        submit.addActionListener(e -> showResult());
        add(submit);

        setVisible(true);
    }

    void showResult() {
        int total = 0;
        boolean pass = true;

        for (int i = 0; i < 5; i++) {
            String input = markFields[i].getText().trim();
            if (!input.matches("\\d+")) {
                JOptionPane.showMessageDialog(this, "Please enter valid integer marks.");
                return;
            }

            int mark = Integer.parseInt(input);
            if (mark < 0 || mark > 100) {
                JOptionPane.showMessageDialog(this, "Marks must be between 0 and 100.");
                return;
            }

            if (mark < 35) pass = false;
            total += mark;
        }

        double percentage = total / 5.0;
        String result = pass ? "Pass" : "Fail";

        JOptionPane.showMessageDialog(this,
            "Total: " + total +
            "\nPercentage: " + String.format("%.2f", percentage) + "%" +
            "\nResult: " + result);
    }
}



Exp4(JDBC)
Exp4.java
import java.sql.*;
public class Exp4 {
 public static void main(String[] args) {
 String url = "jdbc:mysql://localhost:3306/testdb"; // MySQL JDBC URL
 String user = "root";
 String password = "mayur123";
 try (Connection con = DriverManager.getConnection(url, user, password)) {
 Class.forName("com.mysql.cj.jdbc.Driver"); 
 String insert = "INSERT INTO students (id, name, age) VALUES (?, ?, ?)";
 try (PreparedStatement ps = con.prepareStatement(insert)) {
 ps.setInt(1, 3);
 ps.setString(2, "Ram");
 ps.setInt(3, 18);
 ps.executeUpdate();
 }
 try (Statement stmt = con.createStatement();
 ResultSet rs = stmt.executeQuery("SELECT * FROM students")) {
 System.out.println("Student Records:");
 while (rs.next()) {
 System.out.printf("%d | %s | %d%n",
 rs.getInt("id"),
 rs.getString("name"),
 rs.getInt("age"));
 }
 }
 } catch (Exception e) {
 e.printStackTrace();
 }}}


 expt 5 (addition)
 Addition.java (Remote Interface)
import java.rmi.Remote;
import java.rmi.RemoteException;
public interface Addition extends Remote {
 int add(int a, int b) throws RemoteException;
}
AdditionImpl.java (Server Implementation)
import java.rmi.server.UnicastRemoteObject;
import java.rmi.RemoteException;
public class AdditionImpl extends UnicastRemoteObject implements Addition {
 public AdditionImpl() throws RemoteException {
 super();}
 public int add(int a, int b) throws RemoteException {
 return a + b;}}
AdditionServer.java (RMI Server)
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
public class AdditionServer {
 public static void main(String[] args) {
 try {
 AdditionImpl obj = new AdditionImpl();
 Registry registry = LocateRegistry.createRegistry(1099);
 registry.rebind("AddService", obj);
 System.out.println("Addition Server is ready...");
 } catch (Exception e) {
 e.printStackTrace();
 }}}
AdditionClient.java (RMI Client)
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Scanner;
public class AdditionClient {
 public static void main(String[] args) {
 try {
 // Getting input from the user
 Scanner sc = new Scanner(System.in);
 System.out.print("Enter first number: ");
 int num1 = sc.nextInt();
 System.out.print("Enter second number: ");
 int num2 = sc.nextInt();
 Registry registry = LocateRegistry.getRegistry("localhost", 1099);
 Addition stub = (Addition) registry.lookup("AddService");
 int result = stub.add(num1, num2);
 System.out.println("Result from Server: " + result);
 } catch (Exception e) {
 e.printStackTrace();
 }
 }
}

//exp 6 address
Exp6.java
import java.net.InetAddress;
public class Exp6 {
 public static void main(String[] args) {
 try {
 // 1. Get Local Host Address
 InetAddress localHost = InetAddress.getLocalHost();
 System.out.println("Local Host Name : " + localHost.getHostName());
 System.out.println("Local Host Address : " + localHost.getHostAddress());
 // 2. Get IP Address of a Website (e.g., google.com)
 InetAddress google = InetAddress.getByName("www.google.com");
 System.out.println("\nGoogle Host Name : " + google.getHostName());
 System.out.println("Google IP Address : " + google.getHostAddress());
 // 3. Get All IP Addresses Associated with the Domain
 InetAddress[] addresses = InetAddress.getAllByName("www.google.com");
 System.out.println("\nAll Google IP Addresses:");
 for (InetAddress addr : addresses) {
 System.out.println("- " + addr.getHostAddress());
 }
 } catch (Exception e) {
 System.out.println("Error occurred: " + e.getMessage());
 }
 }
}
Output



epx 10
Index.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
 <title>Input Page</title>
</head>
<body style="text-align: center; padding-top: 50px;">
 <h2>Enter Your Name</h2>
 <form action="#">
 <input type="text" name="username" placeholder="Your Name" required>
 <br><br>
 <input type="submit" value="Submit">
 </form>
</body>
</html


exp 10 
Write a simple JSP page to display a simple message (It may be a simple HTML 
page

Index.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
 <title>Input Page</title>
</head>
<body style="text-align: center; padding-top: 50px;">
 <h2>Enter Your Name</h2>
 <form action="#">
 <input type="text" name="username" placeholder="Your Name" required>
 <br><br>
 <input type="submit" value="Submit">
 </form>
</body>
</html>

exp 11



Code:
Exp11.java
package newpackage;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.ActionEvent;
public class Exp11 extends Frame implements ActionListener, ItemListener {
 Dialog dialog;
 Label l;
 Exp11() {
 MenuBar mBar = new MenuBar();
 setMenuBar(mBar);
 Menu file = new Menu("File");
 MenuItem new_file = new MenuItem("New");
 MenuItem open_file = new MenuItem("Open");
 MenuItem save_file = new MenuItem("Save");
 new_file.addActionListener(this);
 open_file.addActionListener(this);
 save_file.addActionListener(this);
 file.add(new_file);
 file.add(open_file);
 file.add(save_file);
 mBar.add(file);
 Menu edit = new Menu("Edit");
 MenuItem undo_edit = new MenuItem("Undo");
 CheckboxMenuItem cut_edit = new CheckboxMenuItem("Cut");
 CheckboxMenuItem copy_edit = new CheckboxMenuItem("Copy");
 CheckboxMenuItem paste_edit = new CheckboxMenuItem("Paste");
 undo_edit.addActionListener(this);
 cut_edit.addItemListener(this);
 copy_edit.addItemListener(this);
 paste_edit.addItemListener(this);
 Menu sub = new Menu("Save Type");
 MenuItem sub1_sum = new MenuItem("Direct Save");
 MenuItem sub2_sum = new MenuItem("Save As");
 sub.add(sub1_sum);
 sub.add(sub2_sum);
 edit.add(sub);
 edit.add(undo_edit);
 edit.add(cut_edit);
 edit.add(copy_edit);
 edit.add(paste_edit);
 mBar.add(edit);
 dialog = new Dialog(this, false);
 dialog.setSize(200, 200);
 dialog.setTitle("Dialog Box");
 Button b = new Button("Close");
 b.addActionListener(this);
 dialog.setLayout(new FlowLayout());
 dialog.add(b);
 l = new Label();
 dialog.add(l);
 }
 public void actionPerformed(ActionEvent ae) {
 String selected_item = ae.getActionCommand();
 switch (selected_item) {
 case "New": l.setText("New"); break;
 case "Open": l.setText("Open"); break;
 case "Save": l.setText("Save"); break;
 case "Undo": l.setText("Undo"); break;
 case "Cut": l.setText("Cut"); break;
 case "Copy": l.setText("Copy"); break;
 case "Paste": l.setText("Paste"); break;
 case "Close": dialog.dispose(); return;
 default: l.setText("Invalid Input");
 }
 dialog.setVisible(true);
 }
 public void itemStateChanged(ItemEvent ie) {
 this.repaint();
 }
 public static void main(String[] args) {
 Exp11 md = new Exp11();
 md.setVisible(true);
 md.setSize(400, 400);
 }}
